tm_basemap("Stamen.Terrain")
tm_shape(World) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("Stamen.Terrain")
tm_shape(World) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("Stamen.Terrain")
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))+
tm_polygons("HPI", legend.title = "Happy Planet Index")
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))+
tm_polygons("HPI", legend.title = "Happy Planet Index")
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
library(tmaptools)
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
df_sf <- st_transform(df_sf, 3857)
#change the mode to plotting
tmap_mode("plot")
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
df_sf <- st_as_sf(d, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
df_sf <- st_transform(df_sf, 3857)
#change the mode to plotting
tmap_mode("plot")
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "skyblue", inner.margins = c(0, .02, .02, .02))
tmap_mode("plot")
tm_shape(shp = df_sf) +
tm_dots(col = "red", size = 0.1, title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))
#plot the datapoints
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
tm_shape(df_sf) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("Esri.WorldTopoMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
tm_shape(World) +
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
View(World)
#plot the datapoints
tm_shape(World)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
tm_shape(World)+
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
tmap_mode("view")
tm_basemap("Stamen.Watercolor") +
tm_shape(metro) + tm_bubbles(size = "pop2020", col = "red") +
tm_tiles("Stamen.TonerLabels")
tm_polygons(c("HPI", "economy")) +
exit
tm_shape(World) +
tm_polygons(c("HPI", "economy")) +
tm_facets(sync = TRUE, ncol = 2)
data(World, df_sf)
#convert the dataframe into an sf object which can be used by tmap
df_sf <- st_as_sf(d, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
#change the mode to plotting
tmap_mode("plot")
data(World, df_sf)
tm_shape(df_sf)
#plot the datapoints
tm_shape(World)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
tm_shape(df_sf)
#plot the datapoints
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA") +
#plot the datapoints
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")
#plot the datapoints
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("elevation", palette = terrain.colors(10))
data(World, land, df_sf)
#plot the datapoints
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("elevation", palette = terrain.colors(10))
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("elevation", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("elevation", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(metro) +
tm_symbols(col = "red", size = "pop2020", scale = .5)
data(World, land, metro, df_sf)
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("elevation", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(metro) +
tm_symbols(col = "red", size = "pop2020", scale = .5)
?tm_raster
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster(, palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(metro) +
tm_symbols(col = "red", size = "pop2020", scale = .5)
?land
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("cover_cls", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "red", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(metro) +
tm_symbols(col = "red", size = "pop2020", scale = .5)
?land
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("cover_cls", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))+
tm_shape(metro) +
tm_symbols(col = "red", size = "pop2020", scale = .5)
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("cover_cls", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
?land
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("cover layer", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
tm_shape(land) +
tm_raster("cover", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#change the mode to plotting
tmap_mode("plot")
data(World, land, df_sf)
#plot the datapoints
tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
#check the land cover/cover_cls & modify the legends later
tm_shape(land) +
tm_raster("cover", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
View(d)
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[!is.na(d$scientificName == "Aspergillus flavus")]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[!is.na(d$scientificName == "Aspergillus flavus"), ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[!is.na(d$scientificName == "Aspergillus flavus"), ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[!is.na(d$scientificName == "Aspergillus flavus"), ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d$scientificName == "Aspergillus flavus"
#retreive the download data (7886 data points)
d <- occ_download_get('0241261-230224095556074') %>%
occ_download_import()
#remove the datapoints that doesn't have full data of the coordinate
d <- d[!is.na(d$decimalLatitude) & !is.na(d$decimalLongitude), ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[d$scientificName != "Aspergillus flavus", ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[d$scientificName != "Aspergillus flavus", ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[d$scientificName == "Aspergillus flavus", ]
View(d)
#retreive the download data (7886 data points)
d <- occ_download_get('0241261-230224095556074') %>%
occ_download_import()
#explore the data and how it is organized
names(d)
#check the different lat&long data
list(d$decimalLatitude)
#remove the datapoints that doesn't have full data of the coordinate
d <- d[!is.na(d$decimalLatitude) & !is.na(d$decimalLongitude), ]
#remove the datapoints with aspergillus oryzae ones (later) & remove unnessary columns
d <- d[d$scientificName == "Aspergillus flavus", ]
#retreive the download data (7886 data points)
d <- occ_download_get('0241261-230224095556074') %>%
occ_download_import()
#explore the data and how it is organized
names(d)
#check the different lat&long data
list(d$decimalLatitude)
#remove the datapoints that doesn't have full data of the coordinate
d <- d[!is.na(d$decimalLatitude) & !is.na(d$decimalLongitude), ]
View(d)
#explore the data and how it is organized
names(d$stateProvince == "Antarctica")
#explore the data and how it is organized
names(d$stateProvince == "Arctic")
#explore the data and how it is organized
names(d$countryCode== "AQ")
?tmap_save
#plot the datapoints
tm_shape(World) +
aflatoxin_map <- tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
#check the land cover/cover_cls & modify the legends later
tm_shape(land) +
tm_raster("cover", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#plot the datapoints
aflatoxin_map <- tm_shape(World) +
tm_borders("white", lwd = .5) +
tm_text("iso_a3", size = "AREA")+
#check the land cover/cover_cls & modify the legends later
tm_shape(land) +
tm_raster("cover", palette = terrain.colors(10))+
tm_shape(df_sf)+
tm_dots(col = "blue", palette = "Set1", title = "City") +
tm_basemap("OpenStreetMap") +
tm_layout(bg.color = "white", inner.margins = c(0, .02, .02, .02))+
tm_layout(legend.position = c("left", "bottom"))
#export the map
tmap_save(aflatoxin_map, filename = "aflatoxin_map.png")
rm(list = ls())
graphics.off())
?read.csv
#import the csv file
data <-read.csv(literature_review.csv)
#import the csv file
data <- read.csv(file = "literature_review.csv", header = FALSE)
getwd()
setwd("Documents/Aflatoxin_project/code/")
setwd("Documents/Aflatoxin_project/code/")
#import the csv file
data <- read.csv(file = "literature_review.csv", header = FALSE)
setwd("Documents/Aflatoxin_project/data/")
setwd("..")
getwd()
setwd("data")
#import the csv file
data <- read.csv(file = "literature_review.csv", header = FALSE)
setwd("Documents/Aflatoxin_project/data/")
#import the csv file
data <- read.csv(file = "literature_review.csv", header = FALSE)
#import the csv file
data <- read.csv(file = "Aflatoxin_literature.csv", header = FALSE)
View(data)
install.packages("maxent")
install.packages("maxnet")
library(maxnet)
library(dismo)
install.packages("dismo")
install.packages("dismo")
library(dismo)
# test if you can use maxent
maxent()
install.packages("rJava")
# test if you can use maxent
maxent()
if (maxent()) {
# get predictor variables
fnames <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
pattern='grd', full.names=TRUE )
predictors <- stack(fnames)
#plot(predictors)
# file with presence points
occurence <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
occ <- read.table(occurence, header=TRUE, sep=',')[,-1]
# witholding a 20% sample for testing
fold <- kfold(occ, k=5)
occtest <- occ[fold == 1, ]
occtrain <- occ[fold != 1, ]
# fit model, biome is a categorical variable
me <- maxent(predictors, occtrain, factors='biome')
# see the maxent results in a browser:
me
# use "args"
# me2 <- maxent(predictors, occtrain, factors='biome', args=c("-J", "-P"))
# plot showing importance of each variable
plot(me)
# response curves
# response(me)
# predict to entire dataset
r <- predict(me, predictors)
# with some options:
# r <- predict(me, predictors, args=c("outputformat=raw"), progress='text',
# filename='maxent_prediction.grd')
plot(r)
points(occ)
#testing
# background data
bg <- randomPoints(predictors, 1000)
#simplest way to use 'evaluate'
e1 <- evaluate(me, p=occtest, a=bg, x=predictors)
# alternative 1
# extract values
pvtest <- data.frame(extract(predictors, occtest))
avtest <- data.frame(extract(predictors, bg))
e2 <- evaluate(me, p=pvtest, a=avtest)
# alternative 2
# predict to testing points
testp <- predict(me, pvtest)
head(testp)
testa <- predict(me, avtest)
e3 <- evaluate(p=testp, a=testa)
e3
threshold(e3)
plot(e3, 'ROC')
}
library(rJava)
library(rJava)
library(dismo)
library(rJava)
library(maxnet)
library(dismo)
library(rJava)
# test if you can use maxent
maxent()
# test if you can use maxent
maxent()
library(rJava)
if (maxent()) {
# get predictor variables
fnames <- list.files(path=paste(system.file(package="dismo"), '/ex', sep=''),
pattern='grd', full.names=TRUE )
predictors <- stack(fnames)
#plot(predictors)
# file with presence points
occurence <- paste(system.file(package="dismo"), '/ex/bradypus.csv', sep='')
occ <- read.table(occurence, header=TRUE, sep=',')[,-1]
# witholding a 20% sample for testing
fold <- kfold(occ, k=5)
occtest <- occ[fold == 1, ]
occtrain <- occ[fold != 1, ]
# fit model, biome is a categorical variable
me <- maxent(predictors, occtrain, factors='biome')
# see the maxent results in a browser:
me
# use "args"
# me2 <- maxent(predictors, occtrain, factors='biome', args=c("-J", "-P"))
# plot showing importance of each variable
plot(me)
# response curves
# response(me)
# predict to entire dataset
r <- predict(me, predictors)
# with some options:
# r <- predict(me, predictors, args=c("outputformat=raw"), progress='text',
# filename='maxent_prediction.grd')
plot(r)
points(occ)
#testing
# background data
bg <- randomPoints(predictors, 1000)
#simplest way to use 'evaluate'
e1 <- evaluate(me, p=occtest, a=bg, x=predictors)
# alternative 1
# extract values
pvtest <- data.frame(extract(predictors, occtest))
avtest <- data.frame(extract(predictors, bg))
e2 <- evaluate(me, p=pvtest, a=avtest)
# alternative 2
# predict to testing points
testp <- predict(me, pvtest)
head(testp)
testa <- predict(me, avtest)
e3 <- evaluate(p=testp, a=testa)
e3
threshold(e3)
plot(e3, 'ROC')
}
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
# test if you can use maxent
maxent()
library(rJava)
dyn.load
clear
